{"version":3,"sources":["scripts/main.js"],"names":["startButton","document","querySelector","table","messageStart","messageLose","messageWin","scoreGame","columns","rows","score","board","gameStart","classList","replace","add","innerText","randomNum","renderHtml","i","k","currentCell","cells","value","className","remove","isGameOver","filterZero","row","filter","num","slide","rowparam","length","push","slideLeft","r","slideRight","reverse","slideUp","c","slideDown","hasEmptyCell","some","cell","found","Math","random","floor","isNextSame","isBelowSame","addEventListener","e","contains","preventDefault","code"],"mappings":"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","file":"main.fe1e4bdc.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.start');\nconst table = document.querySelector('tbody');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst scoreGame = document.querySelector('.game-score');\nconst columns = 4;\nconst rows = 4;\nlet score = 0;\nlet board = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nstartButton.addEventListener('click', gameStart);\n\nfunction gameStart() {\n  board = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n  score = 0;\n\n  startButton.classList.replace('start', 'restart');\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n\n  startButton.innerText = 'Restart';\n\n  randomNum();\n  randomNum();\n};\n\ndocument.addEventListener('keyup', e => {\n  if (!startButton.classList.contains('restart')) {\n    return;\n  };\n\n  e.preventDefault();\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      slideLeft();\n      break;\n    case 'ArrowRight':\n      slideRight();\n      break;\n    case 'ArrowUp':\n      slideUp();\n      break;\n    case 'ArrowDown':\n      slideDown();\n      break;\n  }\n\n  randomNum();\n  renderHtml();\n});\n\nfunction renderHtml() {\n  for (let i = 0; i < columns; i++) {\n    for (let k = 0; k < columns; k++) {\n      const currentCell = table.rows[i].cells[k];\n      const value = board[i][k];\n\n      currentCell.innerText = '';\n      currentCell.classList.value = '';\n      currentCell.className = `field-cell`;\n\n      if (value > 0) {\n        currentCell.innerText = value;\n        currentCell.classList.add(`field-cell--${value}`);\n      }\n\n      if (value === 2048) {\n        messageWin.classList.remove('hidden');\n        startButton.classList.replace('restart', 'start');\n        startButton.innerText = 'Start';\n      }\n    }\n  }\n\n  scoreGame.innerText = score;\n\n  if (isGameOver()) {\n    messageLose.classList.remove('hidden');\n  }\n}\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(rowparam) {\n  let row = filterZero(rowparam);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      score += row[i];\n    }\n  }\n\n  row = filterZero(row);\n\n  while (row.length < columns) {\n    row.push(0);\n  }\n\n  return row;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row = slide(row);\n    board[r] = row;\n  }\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    let row = board[r];\n\n    row.reverse();\n    row = slide(row);\n    board[r] = row.reverse();\n  }\n}\n\nfunction slideUp() {\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row = slide(row);\n    board[0][c] = row[0];\n    board[1][c] = row[1];\n    board[2][c] = row[2];\n    board[3][c] = row[3];\n  }\n}\n\nfunction slideDown() {\n  for (let c = 0; c < columns; c++) {\n    let row = [board[0][c], board[1][c], board[2][c], board[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    board[0][c] = row[0];\n    board[1][c] = row[1];\n    board[2][c] = row[2];\n    board[3][c] = row[3];\n  }\n}\n\nfunction hasEmptyCell() {\n  return board.some(row => row.some(cell => !cell));\n}\n\nfunction randomNum() {\n  if (!hasEmptyCell()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const num = Math.random() < 0.1 ? 4 : 2;\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      board[r][c] = num;\n      found = true;\n    }\n  }\n\n  renderHtml();\n}\n\nfunction isGameOver() {\n  if (hasEmptyCell()) {\n    return false;\n  }\n\n  for (let row = 0; row < rows; row++) {\n    for (let cell = 0; cell < columns - 1; cell++) {\n      const isNextSame = board[row][cell] === board[row][cell + 1];\n      const isBelowSame = board[cell][row] === board[cell + 1][row];\n\n      if (isNextSame || isBelowSame) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n"]}